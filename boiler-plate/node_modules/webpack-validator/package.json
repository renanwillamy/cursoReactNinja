{
  "_from": "webpack-validator",
  "_id": "webpack-validator@3.0.0",
  "_inBundle": false,
  "_integrity": "sha1-EJty5+6RaDrI7Gw78fivuU1QBr4=",
  "_location": "/webpack-validator",
  "_phantomChildren": {
    "ansi-styles": "2.2.1",
    "code-point-at": "1.1.0",
    "decamelize": "1.2.0",
    "escape-string-regexp": "1.0.5",
    "find-up": "1.1.2",
    "graceful-fs": "4.1.11",
    "has-ansi": "2.0.0",
    "is-utf8": "0.2.1",
    "lodash.assign": "4.2.0",
    "normalize-package-data": "2.4.0",
    "number-is-nan": "1.0.1",
    "object-assign": "4.1.1",
    "os-locale": "1.4.0",
    "parse-json": "2.2.0",
    "pify": "2.3.0",
    "pinkie-promise": "2.0.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "1.0.0",
    "strip-ansi": "3.0.1",
    "symbol": "0.2.3",
    "wrap-ansi": "2.1.0",
    "y18n": "3.2.1",
    "yargs-parser": "2.4.1"
  },
  "_requested": {
    "escapedName": "webpack-validator",
    "fetchSpec": "latest",
    "name": "webpack-validator",
    "raw": "webpack-validator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-validator/-/webpack-validator-3.0.0.tgz",
  "_shasum": "109b72e7ee91683ac8ec6c3bf1f8afb94d5006be",
  "_shrinkwrap": null,
  "_spec": "webpack-validator",
  "_where": "/home/renan/Development/cursoReactNinja/react-webpack",
  "babel": {
    "presets": [
      "es2015",
      "stage-2"
    ]
  },
  "bin": {
    "webpack-validator": "./dist/bin/webpack-validator.js"
  },
  "bugs": {
    "url": "https://github.com/js-dxtools/webpack-validator/issues"
  },
  "bundleDependencies": false,
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    },
    "ghooks": {
      "commit-msg": "validate-commit-msg",
      "pre-commit": "npm run validate -s"
    }
  },
  "contributors": [
    {
      "name": "Jonathan Werner",
      "email": "jwe@posteo.de",
      "url": "http://jonathanwerner.net"
    },
    {
      "name": "Juho Vepsäläinen",
      "url": "http://survivejs.com/"
    },
    {
      "name": "Kent C. Dodds",
      "email": "kent@doddsfamily.us",
      "url": "http://kentcdodds.com/"
    },
    {
      "name": "Martin Schmid"
    },
    {
      "name": "Sarbbottam Bandyopadhyay"
    }
  ],
  "dependencies": {
    "basename": "0.1.2",
    "chalk": "1.1.3",
    "commander": "2.9.0",
    "common-tags": "0.1.1",
    "cross-env": "^3.1.1",
    "find-node-modules": "^1.0.1",
    "joi": "9.0.0-0",
    "lodash": "4.11.1",
    "npmlog": "2.0.3",
    "semver": "^5.3.0",
    "shelljs": "0.7.0",
    "yargs": "4.7.1"
  },
  "deprecated": false,
  "description": "Validate your webpack config with joi",
  "devDependencies": {
    "autoprefixer": "6.3.6",
    "babel-cli": "6.7.7",
    "babel-core": "6.7.6",
    "babel-plugin-espower": "^2.1.2",
    "babel-preset-es2015": "6.6.0",
    "babel-preset-stage-2": "6.5.0",
    "babel-register": "6.7.2",
    "brace-expansion": "1.1.3",
    "codecov": "1.0.1",
    "commitizen": "^2.7.6",
    "compression-webpack-plugin": "^0.3.2",
    "copy-webpack-plugin": "^4.0.1",
    "cz-conventional-changelog": "^1.1.5",
    "eslint": "2.8.0",
    "eslint-config-jonathanewerner": "1.0.1",
    "extract-text-webpack-plugin": "^2.1.0",
    "ghooks": "1.2.1",
    "glob": "7.0.3",
    "html-webpack-plugin": "^2.28.0",
    "mocha": "2.4.5",
    "npm-run-all": "1.8.0",
    "nyc": "6.4.0",
    "path-here": "*",
    "path-parse": "1.0.5",
    "power-assert": "1.3.1",
    "rimraf": "2.5.2",
    "semantic-release": "^4.3.5",
    "sinon": "1.17.3",
    "validate-commit-msg": "2.6.1",
    "webpack": "^1",
    "webpack-md5-hash": "^0.0.5",
    "webpack-notifier": "^1.5.0",
    "with-package": "0.2.0"
  },
  "eslintConfig": {
    "extends": "jonathanewerner"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/js-dxtools/webpack-validator#readme",
  "keywords": [
    "config",
    "joi",
    "schema",
    "validation",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist",
  "name": "webpack-validator",
  "nyc": {
    "exclude": [
      "**/*.test.js",
      "test/**/*.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# webpack-validator\n\n > Validate your webpack configs with joi\n\n[![travis build](https://img.shields.io/travis/js-dxtools/webpack-validator.svg?style=flat-square)](https://travis-ci.org/js-dxtools/webpack-validator)\n[![codecov.io](https://img.shields.io/codecov/c/github/js-dxtools/webpack-validator.svg?style=flat-square)](https://codecov.io/github/js-dxtools/webpack-validator?branch=master)\n![dependencies](https://img.shields.io/david/js-dxtools/webpack-validator.svg?style=flat-square)\n![devDependencies](https://img.shields.io/david/dev/js-dxtools/webpack-validator.svg?style=flat-square)\n[![version](https://img.shields.io/npm/v/webpack-validator.svg?style=flat-square)](http://npm.im/webpack-validator)\n[![downloads](https://img.shields.io/npm/dm/webpack-validator.svg?style=flat-square)](http://npm-stat.com/charts.html?package=webpack-validator&from=2015-08-01)\n[![MIT License](https://img.shields.io/npm/l/webpack-validator.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square)](http://commitizen.github.io/cz-cli/)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n\nWriting webpack configs is brittle and error-prone. This package provides a [joi](https://github.com/hapijs/joi) object schema for webpack configs. This gets you a) static type safety, b) property spell checking and c) semantic validations such as \"`loader` and `loaders` can not be used simultaneously\" or \"`query` can only be used with `loader`, not with `loaders`\".\n\nYou're very welcome to give [feedback](https://github.com/js-dxtools/webpack-validator/issues) & [PR's](https://github.com/js-dxtools/webpack-validator).\n\n**Note: webpack v2 has built-in validation for configuration. Due to this, `webpack-validator` is unlikely to make significant changes. While pull requests will be reviewed and can be merged, project maintainers are unlikely to put a lot of much effort into the maintenance of the project.**\n\n### Example\nTake this simple webpack config. It has a tiny, hard to spot error. Can you find it?\n```js\nvar config = {\n  module: {\n    loaders: [\n      { test: /\\.js$/, loaders: 'babel-loader', exclude: /node_modules/ }\n    ]\n  },\n  output: {\n    library: 'Redux',\n    libraryTarget: 'umd'\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(env)\n    })\n  ]\n};\n```\n\nwebpack-validator makes it easy:\n\n![validation-example](https://cloud.githubusercontent.com/assets/3755413/14134087/b3279738-f654-11e5-9752-367b01ac123d.png)\n\n### Usage\nThere are two ways to use webpack-validator: a) \"programmatically\" by wrapping your webpack config object with a validation function or b) by using a command line interface.\n\nFor the first approach, add this in your `webpack.config.js`:\n```js\nconst validate = require('webpack-validator');\n\nmodule.exports = validate({ /* ... your webpack config */ });\n```\nNow run webpack. Either everything is green and the build continues or `joi` will let you know what's wrong and the build won't continue.\n\nIf your webpack config is an array of configs instead of a single object, the above doesn't quite work. Add this in your `webpack.config.js` instead:\n```js\nconst validate = require('webpack-validator').validateRoot;\n\nmodule.exports = validate({ /* ... your webpack config */ });\n```\n\n#### CLI\nFor CLI usage you probably want to install the tool globally (`npm install -g webpack-validator`) first. Then just run `webpack-validator <your-config>`.\n\n### Customizing\n#### Schema\nIf you need to extend the schema, for example for custom top level properties or properties added by third party plugins like `eslint-loader` (which adds a toplevel `eslint` property), do it like this:\n\n```js\nconst validate = require('webpack-validator')\nconst Joi = require('webpack-validator').Joi\n\n// This joi schema will be `Joi.concat`-ed with the internal schema\nconst yourSchemaExtension = Joi.object({\n  // this would just allow the property and doesn't perform any additional validation\n  eslint: Joi.any()\n})\n\nconst config = { /* ... your webpack config */ }\n\nmodule.exports = validate(config, { schemaExtension: yourSchemaExtension })\n```\n\n#### Rules\nSome validations do more than just validating your data shape, they check for best practices and do \"more\" which you might want to opt out of / in to. This is an overview of the available rules (we just started with this, this list will grow :)):\n- **no-root-files-node-modules-nameclash** (default: true): this checks that files/folders that are found in directories specified via webpacks `resolve.root` option do not nameclash with `node_modules` packages. This prevents nasty path resolving bugs (for a motivating example, have a look at [this redux issue](https://github.com/reactjs/redux/issues/1681)).\n- **loader-enforce-include-or-exclude** (default: false): enforce that [loader](https://webpack.github.io/docs/configuration.html#module-loaders) objects use `include` or/and `exclude`, throw when neither is supplied. Without supplying one of these conditions it is too easy to process too many files, for example your `node_modules` folder.\n- **loader-prefer-include** (default: false): enforce that [loader](https://webpack.github.io/docs/configuration.html#module-loaders) objects use `include` and not `exclude`. `exclude` makes it easy to match too many files, which might inadvertently slow your build down.\n\nYou opt in/out of rules by using the `rules` option:\n```js\nmodule.exports = validate(config, {\n  rules: {\n    'no-root-files-node-modules-nameclash': false,\n  },\n})\n```\n\n**Note**: This is not yet implemented via cli options, the default rules will apply in that case.\n\n#### Quiet Mode\nIf you want to mute console output apart from errors, set `--quiet` (`-q`) or `validate(config, { quiet: true })`. This is particularly useful if you are using webpack `--json` as you'll want to avoid writing additional text to the JSON output.\n\n#### Validate all **package.json** `scripts`\nIt is possible to use the CLI to validate all your **package.json** `scripts` related configurations at once by using `--all-scripts` (`-a`). The system will try to guess the convention you are using and then executes validation against each script target based on that.\n\n#### Advanced Usage\nIf you need to access the validation results directly and want to control the side-effects (i.e. console.log output, `process.exit(1)` on fail behaviour) yourself, you can call the validation function like so: `validate(config, { returnValidation: true })`. This will make 1) the function return the validation results instead of your configuration and 2) not perform any side effects.\n\n#### Support\nBecause this module uses the amazing `Joi` validation library, this module only supports Node >=4.0.0.\n\n#### License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/js-dxtools/webpack-validator.git"
  },
  "scripts": {
    "build": "babel --ignore *.test.js -d dist src",
    "check-coverage": "nyc check-coverage --statements 100 --branches 100 --functions 100 --lines 100",
    "commit": "git-cz",
    "cover": "cross-env NODE_ENV=test nyc --reporter=lcov --reporter=text --reporter=html mocha \"src/**/*.test.js\"",
    "lint": "eslint .",
    "prebuild": "rimraf dist",
    "report-coverage": "cat ./coverage/lcov.info | node_modules/.bin/codecov",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "cross-env NODE_ENV=test mocha \"src/**/*.test.js\"",
    "validate": "npm-run-all --parallel lint cover build test --sequential check-coverage",
    "watch:test": "npm run test -- -w"
  },
  "version": "3.0.0"
}
